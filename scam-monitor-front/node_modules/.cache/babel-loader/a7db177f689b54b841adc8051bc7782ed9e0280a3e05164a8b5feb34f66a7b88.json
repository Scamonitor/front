{"ast":null,"code":"var _jsxFileName = \"/Users/eashleybrittneymartinezvergara/Documents/GitHub/front/scam-monitor-front/src/components/Audio.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { ReactMic } from 'react-mic';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone, faStop } from '@fortawesome/free-solid-svg-icons';\nimport '../styles/audio.css'; // Make sure to create and style this CSS file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Audio() {\n  _s();\n  const [record, setRecord] = useState(false);\n  const toggleRecording = () => {\n    setRecord(prevRecord => !prevRecord);\n  };\n  const onStop = recordedBlob => {\n    console.log('Recorded Blob:', recordedBlob);\n    // Here you can send the recordedBlob to your backend\n\n    // Verify the MIME type of the recordedBlob\n    if (recordedBlob.blob.type === 'audio/wav') {\n      console.log('The MIME type of the recordedBlob is audio/wav');\n    } else {\n      console.log('The MIME type of the recordedBlob is not audio/wav');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"title-audio\",\n        children: \"Analyze Audio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        icon: faMicrophone,\n        size: \"2x\",\n        color: \"#ffffff\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"audio-description\",\n      children: \"Click the button below to start recording your audio. Once finished, click stop to analyze.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sound-wave-container\",\n      children: /*#__PURE__*/_jsxDEV(ReactMic, {\n        record: record,\n        className: \"sound-wave\",\n        onStop: onStop,\n        mimeType: \"audio/wav\",\n        strokeColor: \"#000000\",\n        backgroundColor: \"#BAD3F8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-controls\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleRecording,\n        type: \"button\",\n        className: \"icon-button\",\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: record ? faStop : faMicrophone\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(Audio, \"sRDCILyBJ4t9zftfEyv7kwnSOLs=\");\n_c = Audio;\nexport default Audio;\nvar _c;\n$RefreshReg$(_c, \"Audio\");","map":{"version":3,"names":["React","useState","ReactMic","FontAwesomeIcon","faMicrophone","faStop","jsxDEV","_jsxDEV","Audio","_s","record","setRecord","toggleRecording","prevRecord","onStop","recordedBlob","console","log","blob","type","className","children","fileName","_jsxFileName","lineNumber","columnNumber","icon","size","color","mimeType","strokeColor","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["/Users/eashleybrittneymartinezvergara/Documents/GitHub/front/scam-monitor-front/src/components/Audio.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { ReactMic } from 'react-mic';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMicrophone, faStop } from '@fortawesome/free-solid-svg-icons';\nimport '../styles/audio.css'; // Make sure to create and style this CSS file\n\nfunction Audio() {\n  const [record, setRecord] = useState(false);\n\n  const toggleRecording = () => {\n    setRecord(prevRecord => !prevRecord);\n  };\n\n  const onStop = (recordedBlob) => {\n    console.log('Recorded Blob:', recordedBlob);\n    // Here you can send the recordedBlob to your backend\n\n    // Verify the MIME type of the recordedBlob\n    if (recordedBlob.blob.type === 'audio/wav') {\n      console.log('The MIME type of the recordedBlob is audio/wav');\n    } else {\n      console.log('The MIME type of the recordedBlob is not audio/wav');\n    }\n  };\n\n  return (\n    <div className=\"audio-container\">\n      <div className=\"audio-card\">\n        <p className=\"title-audio\">Analyze Audio</p>\n        <FontAwesomeIcon icon={faMicrophone} size=\"2x\" color=\"#ffffff\" />\n      </div>\n      <p className=\"audio-description\">\n        Click the button below to start recording your audio. Once finished, click stop to analyze.\n      </p>\n      <div className=\"sound-wave-container\">\n        <ReactMic\n          record={record}\n          className=\"sound-wave\"\n          onStop={onStop}\n          mimeType=\"audio/wav\"\n          strokeColor=\"#000000\"\n          backgroundColor=\"#BAD3F8\"\n        />\n      </div>\n      <div className=\"audio-controls\">\n        <button onClick={toggleRecording} type=\"button\" className=\"icon-button\">\n          <FontAwesomeIcon icon={record ? faStop : faMicrophone} />\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default Audio;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}